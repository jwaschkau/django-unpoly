{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":""},{"location":"#django-unpoly","title":"django-unpoly","text":"<p>Unpoly 2 integration and utilities for Django</p> <ul> <li>Free software: MIT</li> <li>Documentation: https://jwaschkau.github.io/django-unpoly/</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Implements the Unpoly 2 Server protocol (https://unpoly.com/up.protocol)</li> <li>Provides utilities for using Unpoly 2 with Django 3.</li> <li>django-debug-toolbar support (https://github.com/jazzband/django-debug-toolbar).</li> <li>django-concurrency support (https://github.com/saxix/django-concurrency).</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.</p>"},{"location":"api/","title":"modules","text":"<p>::: django_unpoly.up</p>"},{"location":"authors/","title":"authors","text":""},{"location":"authors/#credits","title":"Credits","text":""},{"location":"authors/#development-lead","title":"Development Lead","text":"<ul> <li>Jannik Eilers j.waschkau@gmail.com</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<p>None yet. Why not be the first?</p>"},{"location":"contributing/","title":"contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/jwaschkau/django-unpoly/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>django-unpoly could always use more documentation, whether as part of the official django-unpoly docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/jwaschkau/django-unpoly/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>django-unpoly</code> for local development.</p> <ol> <li>Fork the <code>django-unpoly</code> repo on GitHub.</li> <li>Clone your fork locally</li> </ol> <pre><code>    $ git clone git@github.com:your_name_here/django-unpoly.git\n</code></pre> <ol> <li>Ensure poetry is installed.</li> <li>Install dependencies and start your virtualenv:</li> </ol> <pre><code>    $ poetry install -E test -E doc -E dev\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>    $ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</li> </ol> <pre><code>    $ tox\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9, 3.10, 3.11, 3.12 and for PyPy. Check    https://github.com/jwaschkau/django-unpoly/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips```","text":"<pre><code>$ pytest tests.test_django_unpoly\n</code></pre> <p>```To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run:</p> <pre><code>$ poetry patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>Travis will then deploy to PyPI if tests pass.</p>"},{"location":"history/","title":"history","text":""},{"location":"history/#history","title":"History","text":""},{"location":"history/#020-2024-06-10","title":"0.2.0 (2024-06-10)","text":"<ul> <li>Allow All Django versions</li> </ul>"},{"location":"history/#014-2021-10-07","title":"0.1.4 (2021-10-07)","text":"<ul> <li>Allow All Django versions</li> </ul>"},{"location":"history/#013-2021-09-29","title":"0.1.3 (2021-09-29)","text":"<ul> <li>Fixes '_handle_redirect_headers' is called with wrong parameters.</li> </ul>"},{"location":"history/#012-2021-08-13","title":"0.1.2 (2021-08-13)","text":"<ul> <li>Added server side support for Unpoly headers when redirecting.</li> <li>Added X-Up-Target support for Django class-based views.</li> </ul>"},{"location":"history/#011-2021-06-23","title":"0.1.1 (2021-06-23)","text":"<ul> <li>Fixes <code>X-Up-Target</code> not considered in middleware.</li> <li>Fixes detection of django-debug-toolbar. Now no JavaScript-Errors will be triggered if djdt is not initialized.</li> <li>Renamed all UnpolyXXX classes to UpXXX.</li> <li>If a version tracked object was modified status code 410 will be set for UpException.</li> </ul>"},{"location":"history/#010-2021-06-07","title":"0.1.0 (2021-06-07)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"installation/","title":"installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install django-unpoly, run this command in your terminal:</p> <pre><code>$ pip install django-unpoly\n</code></pre> <p>This is the preferred method to install django-unpoly, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for django-unpoly can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/jwaschkau/django-unpoly\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/jwaschkau/django-unpoly/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use django-unpoly in a project</p> <pre><code>MIDDLEWARE = [\n...\n'django_unpoly.middleware.UpMiddleware',\n...\n]\n</code></pre>"},{"location":"usage/#unpoly-modal-forms","title":"Unpoly Modal forms","text":"<p>The target is determined automatically if the model uses the <code>UpModelIdMixin</code> and updated if the successful form submission returns html containing <code>up-id</code>. Form errors will update the current open modal dialog.</p>"},{"location":"usage/#python","title":"Python","text":"<pre><code>from django_unpoly.up import UpViewMixin\nfrom django.views.generic import UpdateView\n\nclass MyUnpolyModelView(UpModelViewMixin, UpdateView):\n    autosubmit = True\n    form_class = MyFormClass\n    template_name = 'django_unpoly/form.up.html'\n    model = MyModel\n</code></pre> <p>The X-Up-Target-Header can be set manually to change the HTML defined target. <pre><code>class MyUnpolyModelView(UpModelViewMixin, UpdateView):\n    def form_valid(self, form):\n        if xyz:\n            self.up_target = '#main'\n</code></pre></p>"},{"location":"usage/#html","title":"HTML","text":"<pre><code>&lt;div up-id=\"{{object.up_id}}\"&gt;\n    &lt;a up-layer=\"new\" href=\"{% url 'myformurl' object.id %}\"&gt;\n        MyModal\n    &lt;/a&gt;\n&lt;/div&gt;\n</code></pre> <p>A redirect may be used to update the target on successful form submissions.</p> <pre><code>&lt;div up-id=\"{{object.up_id}}\"&gt;\n    &lt;a up-layer=\"new\" href=\"{% url 'myformurl' object.id %}?redirect=\"currentpage\"&gt;\n        MyModal\n    &lt;/a&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"usage/#django-debug-toolbar","title":"django-debug-toolbar","text":"<p>In your main layout include the following js-file. <pre><code>&lt;script src=\"{% static 'django_unpoly/up_djdt.js' %}\"&gt;&lt;/script&gt;\n</code></pre></p>"},{"location":"usage/#django-concurrency","title":"django-concurrency","text":"<p>The current version of the model has to be added to the unpoly form url. Before the form is rendered the version will be checked for changes. The <code>version</code> field should also be added to the form to prevent concurrent changes to the model.</p> <pre><code>&lt;a up-modal=\"new\" href=\"{% url 'myurl' model.id %}?version={{ model.version }}\"&gt;\n    MyModal\n&lt;/a&gt;\n</code></pre> <pre><code>from django_unpoly.up import UpModelViewMixin, UpDjangoConcurrencyMixin\nfrom django.views.generic import UpdateView\n\nclass MyUnpolyModelView(UpDjangoConcurrencyMixin, UpModelViewMixin, UpdateView):\n    autosubmit = True\n    form_class = MyFormClass\n    template_name = 'django_unpoly/form.unpoly.html'\n    model = MyModel\n</code></pre>"}]}